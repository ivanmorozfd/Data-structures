#pragma once
const char* menuTitle = "Выберите тестируемую структуру данных\n";
const char* menuStackName = "\n[1] Стэк";
const char* menuQueueName = "\n[2] Очередь";
const char* menuMListName = "\n[3] Список с потоками";
const char* menuDListName = "\n[4] Двусвязный список";
const char* menuBHeapName = "\n[5] Двоичная куча";
const char* menuMatrixName = "\n[6] Разреженная матрица";
const char* menuAvlTreeName = "\n[7] АВЛ - дерево";
const char* menuBstName = "\n[8] Бинарное дерево поиска";
const char* menuRbTreeName = "\n[9] Красно - черное дерево";
const char* menuExitName = "\n[10] Выйти";
const char* menuInputError = "Ошибка ввода.Введите число в диапазоне от 1 до 11 \n\n";
const char* enterAnswer = "\nВведите ответ: ";


const char* stackMenuSelectAction = "Выберите действие\n";
const char* stackMenuCreateStack = "\n[1] Создать стек";
const char* stackMenuEmptyTest = "\n[2] Проверить стек на пустоту";
const char* stackMenuPushItem = "\n[3] Добавить элемент в стек";
const char* stackMenuPeekTop = "\n[4] Получить элемент на вершине";
const char* stackMenuPopItem = "\n[5] Удалить элемент с вершины стека";
const char* stackMenuReadFromFile = "\n[6] Прочитать стек из файла";
const char* stackMenuWriteToFile = "\n[7] Записать стек в файл";
const char* stackMenuClear = "\n[8] Очистить стек";
const char* stackMenuDestroy =  "\n[9] Разрушить стек";
const char* stackMenuRandomize = "\n[10] Заполнить стек случайными числами ";
const char* stackMenuPrint =  "\n[11] Вывести содержимое стека";
const char* stackMenuExit =  "\n[12] Выйти";

const char* stackCreateSuccess = "[ Система ] Стек успешно создан\n\n";
const char* stackCreateFailure = "[ Система ] Стек уже создан\n\n";
const char* stackNotCreated = "[ Система ] Стек не создан\n\n";
const char* stackIsEmpty = "[ Система ] Стек пуст\n\n";
const char* stackIsNotEmpty = "[ Система ] Стек не пуст\n\n";
const char* stackPushMessage01 = "[ Система ] Введите элемент , который нужно добавить в стек\n\n";
const char* stackPushMessage02 = "[ Cистема ] Элемент ";
const char* stackPushMessage03 = " успешно добавлен в стек\n\n";
const char* stackPeekMessage = "[ Cистема ] Элемент на вершине стека : ";
const char* stackPopMessage = "[ Cистема ] Элемент на вершине стека удален\n\n";
const char* stackReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать стек\n\n";
const char* stackReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* stackReadFileSuccessMessage = "[ Система ] Успешное чтение стека из файла\n\n";
const char* stackWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать стек\n\n";
const char* stackWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* stackWriteFileSuccess = "[ Система ] Успешная запись стека в файл\n\n";
const char* stackClearSucces = "[ Система ] Стек успешно очищен\n\n";
const char* stackDestroyedMessage = "[ Система ] Стек успешно разрушен\n\n";
const char* stackRandomizeMessage = "[ Система ] Введите размер стека\n\n";
const char* stackRandomizeErrorMessage = "[ Система ] Ошибка ввода.Размер стека должен быть ненулевым значением\n\n";
const char* stackRandomizeUpRangeMessge = "[ Система ] Введите верхнее значение диапазона случайных чисел\n\n";
const char* stackRandomizeSuccess = "[ Система ] Стек упешно заполнен случайными числами\n\n";


const char* queueMenuSelectAction = "\nВыберите действие\n";
const char* queueMenuCreate = "\n[1] Создать очередь";
const char* queueMenuEmptyTest = "\n[2] Проверить очередь на пустоту";
const char* queueMenuPushItem = "\n[3] Добавить элемент очередь";
const char* queueMenuPeek = "\n[4] Получить элемент в начале очереди";
const char* queueMenuPopItem = "\n[5] Удалить элемент очереди";
const char* queueMenuReadFromFile = "\n[6] Прочитать очередь из файла";
const char* queueMenuWriteToFile = "\n[7] Записать очередь в файл";
const char* queueMenuRandomize = "\n[8] Заполнить очередь случайными числами ";
const char* queueMenuPrint = "\n[9] Вывести содержимое очереди";
const char* queueMenuClear = "\n[10] Очистить очередь";
const char* queueMenuDestroy = "\n[11] Удалить оередь";
const char* queueMenuExit = "\n[12] Выйти";

const char* queueCreateSuccess = "[ Система ] Очередь успешно создана\n\n";
const char* queueCreateFailure = "[ Система ] Очередь уже создана\n\n";
const char* queueNotCreated = "[ Система ] Очередь не создана\n\n";
const char* queueIsEmpty = "[ Система ] Очередь пуста\n\n";
const char* queueIsNotEmpty = "[ Система ] Очередь не пуста\n\n";
const char* queuePushMessage01 = "[ Система ] Введите элемент , который нужно добавить в очередь\n\n";
const char* queuePushMessage02 = "[ Cистема ] Элемент ";
const char* queuePushMessage03 = " успешно добавлен в Очередь\n\n";
const char* queuePeekMessage = "[ Cистема ] Элемент на вершине очереди : ";
const char* queuePopMessage = "[ Cистема ] Элемент на вершине очереди удален\n\n";
const char* queueReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать очередь\n\n";
const char* queueReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* queueReadFileSuccessMessage = "[ Система ] Успешное чтение очереди из файла\n\n";
const char* queueWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать очередь\n\n";
const char* queueWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* queueWriteFileSuccess = "[ Система ] Успешная запись очереди в файл\n\n";
const char* queueClearSucces = "[ Система ] Очередь успешно очищен\n\n";
const char* queueDestroyedMessage = "[ Система ] Очередь успешно разрушен\n\n";
const char* queueRandomizeMessage = "[ Система ] Введите размер очереди\n\n";
const char* queueRandomizeErrorMessage = "[ Система ] Ошибка ввода.Размер очереди должен быть ненулевым значением\n\n";
const char* queueRandomizeUpRangeMessge = "[ Система ] Введите верхнее значение диапазона случайных чисел\n\n";
const char* queueRandomizeSuccess = "[ Система ] Очередь упешно заполнен случайными числами\n\n";

const char* mlistMenuSelectAction = "\nВыберите действие\n";
const char* mlistMenuCreate = "\n[1] Создать список";
const char* mlistMenuIsEmpty = "\n[2] Проверить список на пустоту";
const char* mlistMenuPush = "\n[3] Добавить пару Фамилия:Номер в список";
const char* mlistMenuRemoveBySecondName = "\n[4] Удалить элемент из списка по фамилии";
const char* mlistMenuRemoveByTelephone = "\n[5] Удалить элемент из списка по номеру телефона";
const char* mlistMenuFindFieldBySecondName = "\n[6] Найти элемент из списка по номеру телефона";
const char* mlistMenuFindFieldByTelephone = "\n[7] Найти элемент из списка по номеру телефона";
const char* mlistMenuPrintOrderBySecondNameDec = "\n[8] Вывести содержимое списка по убыванию фамилий";
const char* mlistMenuPrintOrderBySecondNameInc = "\n[9] Вывести содержимое списка по возрастанию фамилий";
const char* mlistMenuPrintOrderByTelephoneDec = "\n[10] Вывести содержимое списка по убыванию номеров";
const char* mlistMenuPrintOrderByTelephoneInc = "\n[11] Вывести содержимое списка по возрастанию фамилий";
const char* mlistMenuReadFromFile = "\n[12] Прочитать список из файла";
const char* mlistMenuWriteToFile = "\n[13] Записать список в файл";
const char* mlistMenuClear = "\n[14] Очистить список";
const char* mlistMenuDestroy = "\n[15] Удалить список";
const char* mlistMenuExit = "\n[16] Выйти";

const char* mlistCreateSuccess = "[ Система ] Список успешно создан\n\n";
const char* mlistCreateFailure = "[ Система ] Список уже создан\n\n";
const char* mlistNotCreated = "[ Система ] Список не создан\n\n";
const char* mlistIsEmpty = "[ Система ] Список пуст\n\n";
const char* mlistIsNotEmpty = "[ Система ] Список не пуст\n\n";
const char* mlistPushMessage01 = "[ Система ] Введите пару Фамилия Телефон , которую нужно добавить в список\n\n";
const char* mlistPushMessage02 = " успешно добавлен в список\n\n";
const char* mlistFindFieldBySecondName = "[ Система ] Введите фамилию по которой нужно произвести поиск \n\n";
const char* mlistFindFieldByTelephone = "[ Система ] Введите телефон по которому нужно произвести поиск \n\n";
const char* mlistRemoveBySecondNameMessage01 = "[ Система ] Введите фамилию,по которой нужно удалить запись\n\n";
const char* mlistRemoveBySecondNameMessage02 = "[ Система ] Запись успешно удалена\n\n";
const char* mlistRemoveByTelephoneMessage01 = " Введите телефон,по которой нужно удалить запись\n\n";
const char* mlistRemoveByTelephoneMessage02 = " запись успешна удалена\n\n";
const char* mlistPrintOrderBySecondName = " Список отсортированный по фамилиям: ";
const char* mlistPrintOrderByTelephone = " Список отсортированный по телефонам: ";
const char* mlistPrintInc = " по убыванию \n\n";
const char* mlistPrintDec = " по убыванию \n\n";
const char* mlistReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать список\n\n";
const char* mlistReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* mlistReadFileSuccessMessage = "[ Система ] Успешное чтение списка из файла\n\n";
const char* mlistWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать список\n\n";
const char* mlistWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* mlistWriteFileSuccess = "[ Система ] Успешная запись списка в файл\n\n";
const char* mlistClearSucces = "[ Система ] Список успешно очищен\n\n";
const char* mlistDestroyedMessage = "[ Система ] Список успешно разрушен\n\n";


const char* dlistMenuSelectAction = "\nВыберите действие\n";
const char* dlistMenuCreate = "\n[1] Создать список";
const char* dlistMenuIsEmpty = "\n[2] Проверить список на пустоту";
const char* dlistMenuPushBack = "\n[3] Добавить элемент в конец списка";
const char* dlistMenuPushFront = "\n[4] Добавить элемент в начало списка";
const char* dlistMenuPeekFront = "\n[5] Получить элемент в начале списка";
const char* dlistMenuPeekBack = "\n[6] Получить элемент в конце списка";
const char* dlistMenuPopFront = "\n[7] Удалить элемент в начале списка";
const char* dlistMenuPopBack = "\n[8] Удалить элемент в конце списка";
const char* dlistMenuReadFromFile = "\n[9] Прочитать список из файла";
const char* dlistMenuWriteToFile = "\n[10] Записать список в файл";
const char* dlistMenuRandomize = "\n[11] Заполнить список случайными числами ";
const char* dlistMenuPrint = "\n[12] Вывести содержимое списка";
const char* dlistMenuClear = "\n[13] Очистить список";
const char* dlistMenuDestroy = "\n[14] Удалить список";
const char* dlistMenuExit = "\n[15] Выйти";

const char* dlistCreateSuccess = "[ Система ] Список успешно создан\n\n";
const char* dlistCreateFailure = "[ Система ] Список уже создан\n\n";
const char* dlistNotCreated = "[ Система ] Список не создан\n\n";
const char* dlistIsEmpty = "[ Система ] Список пуст\n\n";
const char* dlistIsNotEmpty = "[ Система ] Список не пуст\n\n";
const char* dlistPushFrontMessage01 = "[ Система ] Введите элемент , который нужно добавить в начало списка\n\n";
const char* dlistPushFrontMessage02 = "[ Cистема ] Элемент ";
const char* dlistPushFrontMessage03 = " успешно добавлен в начало списка\n\n";
const char* dlistPushBackMessage01 = "[ Система ] Введите элемент , который нужно добавить в конец списка\n\n";
const char* dlistPushBackMessage02 = "[ Cистема ] Элемент ";
const char* dlistPushBackMessage03 = " успешно добавлен в конец списка\n\n";
const char* dlistPeekFrontMessage = "[ Cистема ] Элемент на вершине списка : ";
const char* dlistPeekBackMessage = "[ Cистема ] Элемент в конце списка : ";
const char* dlistPopFrontMessage = "[ Cистема ] Элемент в начале списка удален\n\n";
const char* dlistPopBackMessage = "[ Cистема ] Элемент в конце списка удален\n\n";
const char* dlistReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать список\n\n";
const char* dlistReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* dlistReadFileSuccessMessage = "[ Система ] Успешное чтение списка из файла\n\n";
const char* dlistWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать список\n\n";
const char* dlistWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* dlistWriteFileSuccess = "[ Система ] Успешная запись списка в файл\n\n";
const char* dlistClearSucces = "[ Система ] Список успешно очищен\n\n";
const char* dlistDestroyedMessage = "[ Система ] Список успешно разрушен\n\n";
const char* dlistRandomizeMessage = "[ Система ] Введите размер списка\n\n";
const char* dlistRandomizeErrorMessage = "[ Система ] Ошибка ввода.Размер списка должен быть ненулевым значением\n\n";
const char* dlistRandomizeUpRangeMessge = "[ Система ] Введите верхнее значение диапазона случайных чисел\n\n";
const char* dlistRandomizeSuccess = "[ Система ] Список упешно заполнен случайными числами\n\n";


const char* bheapMenuSelectAction =  "\nВыберите действие\n";
const char* bheapMenuCreate = "\n[1] Создать кучу";
const char* bheapMenuIsEmpty = "\n[2] Проверить кучу на пустоту";
const char* bheapMenuAddItem = "\n[3] Добавить элемент в кучу";
const char* bheapMenuMax = "\n[4] Получить элемент максимальный элемент в куче";
const char* bheapMenuRemove = "\n[5] Удалить элемент из кучи";
const char* bheapMenuReadFromFile = "\n[6] Прочитать кучу из файла";
const char* bheapMenuWriteToFile = "\n[7] Записать кучу в файл";
const char* bheapMenuRandomize = "\n[8] Заполнить кучу случайными числами ";
const char* bheapMenuPrint = "\n[9] Вывести содержимое кучи";
const char* bheapMenuClear = "\n[10] Очистить кучу";
const char* bheapMenuDestroy = "\n[11] Удалить кучу";
const char* bheapMenuExit = "\n[12] Выйти";

const char* bheapIsEmptyMessage = "[ Система ] Куча пуста\n\n";
const char* bheapIsNotEmptyMessage = "[ Система ] Куча не пуста\n\n";
const char* bheapCreateSuccessMessage = "[ Система ] Куча создана\n\n";
const char* bheapCreateFailureMessage = "[ Система ] Куча уже создана\n\n";
const char* bheapNotCreatedMessage = "[ Система ] Куча не создана \n\n";
const char* bheapAddItemMessage01 = "[ Система ] Введите элемент , который нужно добавить в кучу\n\n";
const char* bheapAddItemMessage02 = "[ Cистема ] Элемент ";
const char* bheapAddItemMessage03 = " успешно добавлен кучу\n\n";
const char* bheapPeekMaxMessage01 = "[ Система ] Элемент на вершине кучи : ";
const char* bheapClearSuccessMessage = "[ Система ] Куча успешно очищена";
const char* bheapReadFileMessage = "[ Система ] Введите имя файла из котрого нужно прочитать кучу";
const char* bheapReadFileErrMessage = "[ Система ] Ошибка при откртии потока чтения";
const char* bheapReadFileSuccessMessage = "[ Система ] Куча успешно записана из файла";
const char* bheapWriteFileMessage = "[ Система ] Введите имя файла в который нужно записать кучу";
const char* bheapWriteFileErrMessage = "[ Система ] Ошибка при открытии потока записи";
const char* bheapWriteFileSuccess = "[ Система ] Куча успешно записана в фал";
const char* bheapDestroyedMessage = "[ Система ] Объект кучи уничтожен";
const char* bheapRandomizeMessage = "[ Система ] Введите количество генерируемых элементов";
const char* bheapRandomizeErrorMessage = "[ Система ] Ошибка ввода ";
const char* bheapRandomizeUpRangeMessge = "[ Система ] Введите верхний предел чисел для случайного заполнения";
const char* bheapRandomizeSuccess = "[ Система ] Бинарная куча успешно заполнена случайными числами";


const char* sMatrixMenuSelectAction = "\nВыберите действие\n";
const char* sMatrixMenuCreate = "\n[1] Создать разреженную матрицу";
const char* sMatrixMenuIsEmpty = "\n[2] Проверить разреженную матрицу на пустоту";
const char* sMatrixMenuAddItem = "\n[3] Добавить элемент в разреженную матрицу";
const char* sMatrixMenuGetByPos = "\n[4] Получить элемент из разреженной матрицы";
const char* sMatrixMenuRemoveByPos = "\n[5] Удалить элемент из разреженной матрицы";
const char* sMatrixMenuReadFromFile = "\n[6] Прочитать разреженную матрицу из файла";
const char* sMatrixMenuWriteToFile = "\n[7] Записать разреженную матрицу в файл";
const char* sMatrixMenuPrint = "\n[8] Вывести содержимое разреженную матрицы";
const char* sMatrixMenuClear = "\n[9] Очистить разреженную матрицу";
const char* sMatrixMenuDestroy = "\n[10] Удалить разреженную матрицу";
const char* sMatrixMenuExit = "\n[11] Выйти"; 

const char* matrixIsEmptyMessage = "[ Система ] Матрица пуста ";
const char* matrixIsNotEmptyMessage = "[ Система ] Матрица не пуста ";
const char* matrixCreateSuccessMessage = "[ Система ] Матрица успешно создана\n\n";
const char* matrixCreateFailureMessage = "[ Система ] Матрица уже создана\n\n";
const char* matrixNotCreatedMessage = "[ Система ] Матрица не создана";
const char* matrixAddItemMessage01 = "[ Система ] Введите элемент , который нужно добавить в матрицу и его координаты\n\n";
const char* matrixAddItemMessage02 = "[ Cистема ] Элемент ";
const char* matrixAddItemMessage03 = " успешно добавлен в матрицу на позиции\n\n";
const char* matrixGetByPos01 = "[ Система ] Получить элемент на позиции : \n\n ";
const char* matrixGetByPos02 = "[ Система ] Элемент на позиции :";
const char* matrixGetByPos03 = "[ Система ] равен :";
const char* matrixRemoveByPosMessage01 = "[ Система ] Введите позицию, на которой нужно удалить элемент \n\n";
const char* matrixRemoveByPosMessage02 = "[ Система ] Элемент ";
const char* matrixRemoveByPosMessage03 = "[ Система ] удален на позиции \n\n";
const char* matrixReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать матрицу\n\n";
const char* matrixReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* matrixReadFileSuccessMessage = "[ Система ] Успешное чтение списка из файла\n\n";
const char* matrixWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать матрицу\n\n";
const char* matrixWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* matrixWriteFileSuccess = "[ Система ] Успешная запись матрицы в файл\n\n";
const char* matrixDestroyedMessage = "[ Система ] Объект матрицы успешно уничтожен ";
const char* matrixRandomizeMessage = "[ Система ] Введите размеры матрицы \n\n";
const char* matrixRandomizeErrorMessage = "[ Система ] Неверная размерность матрицы\n\n";
const char* matrixRandomizeUpRangeMessge = "[ Система ] Верхний предел для случайных чисел\n\n";
const char* matrixRandomizeSuccess = "[ Система ] Матрица успешно создана и заполнена случайными числами\n\n";
const char* matrixClearSuccess = "[ Система ] Матрица очищена\n\n";
const char* matrixDestroySuccess = "[ Система ] Объект матрицы уничтоежн\n\n";


const char* avlMenuSelectAction = "Выберите действие\n";
const char* avlMenuCreate = "\n[1] Создать АВЛ дерево";
const char* avlMenuIsEmpty = "\n[2] Проверить АВЛ дерево на пустоту";
const char* avlMenuAddItem = "\n[3] Добавить элемент в АВЛ дерево";
const char* avlMenuFindMin = "\n[4] Найти минимальный элемент в дереве";
const char* avlMenuRemove = "\n[5] Удалить элемент из АВЛ дерева";
const char* avlMenuReadFromFile = "\n[6] Прочитать АВЛ дерево из файла";
const char* avlMenuWriteToFile = "\n[7] Записать АВЛ дерево в файл";
const char* avlMenuRandomize = "\n[8] Заполнить АВЛ дерево случайными числами ";
const char* avlMenuPrint = "\n[9] Вывести содержимое АВЛ дерева";
const char* avlMenuClear = "\n[10] Очистить АВЛ дерево";
const char* avlMenuDestroy = "\n[11] Удалить АВЛ дерево";
const char* avlMenuExit = "\n[12] Выйти";

const char* avlTreeIsEmptyMessage = "[ Система ] АВЛ-дерево пустое \n\n";
const char* avlTreeIsNotEmptyMessage = "[ Система ] АВЛ-дерево не пустое\n\n";
const char* avlTreeCreateSuccessMessage = "[ Система ] АВЛ-дерево успешно создано\n\n";
const char* avlTreeCreateFailureMessage = "[ Система ] АВЛ-дерево уже создано\n\n";
const char* avlTreeNotCreatedMessage = "[ Система ] АВЛ-дерево не создано\n\n";
const char* avlTreeAddItemMessage01 = "[ Система ] Введите элемент , который нужно добавить в АВЛ-дерево\n\n";
const char* avlTreeAddItemMessage02 = "[ Cистема ] Элемент ";
const char* avlTreeAddItemMessage03 = " успешно добавлен в АВЛ-дерево\n\n";
const char* avlTreeFindItemMessage01 = "[ Cистема ] Элемент ";
const char* avlTreeFindItemMessage02 = " минимален в АВЛ-дереве\n\n";
const char* avlTreeRemoveItemMessage01 = "[ Система ] Введите элемент , который нужно удалить из АВЛ-дерева\n\n";
const char* avlTreeRemoveItemMessage02 = "[ Cистема ] Элемент ";
const char* avlTreeRemoveItemMessage03 = " удален из АВЛ-дерева\n\n";
const char* avlTreeRemoveItemMessage04 = " не существует в АВЛ-дереве\n\n";
const char* avlTreeReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать АВЛ-дерево\n\n";
const char* avlTreeReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* avlTreeReadFileSuccessMessage = "[ Система ] Успешное чтение АВЛ-дерева из файла\n\n";
const char* avlTreeWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать АВЛ-дерево\n\n";
const char* avlTreeWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* avlTreeWriteFileSuccess = "[ Система ] Успешная запись АВЛ-дерева в файл\n\n";
const char* avlTreeDestroyedMessage = "[ Система ] Объект АВЛ-дерева успешно уничтожен\n\n";
const char* avlTreeRandomizeMessage = "[ Система ] Введите число элементов АВЛ-дерева\n\n";
const char* avlTreeRandomizeErrorMessage = "[ Система ] Неверная размерность АВЛ-дерева\n\n";
const char* avlTreeRandomizeUpRangeMessge = "[ Система ] Верхний предел для случайных чисел\n\n";
const char* avlTreeRandomizeSuccess = "[ Система ] АВЛ-дерево успешно создано и заполнена случайными числами\n\n";
const char* avlTreeClearSuccessMessage = "[ Система ] АВЛ-дерево успешно очищено\n\n";
const char* avlTreePrintMessage01 = "[ Система ] Каким образом вывести дерево?\n\n";
const char* avlTreePrintMessage02 = "[ Система ] Прямой обход: 0\n\n";
const char* avlTreePrintMessage03 = "[ Система ] Симметричный обход: 1\n\n";
const char* avlTreePrintMessage04 = "[ Система ] Обратный обход: 2\n\n";
const char* avlTreeClearMessage = "[ Система ] АВЛ-дерево очищено";
const char* avlTreeDestroyMessage = "[ Система ] Объект АВЛ-дерева уничтожено";


const char* bstMenuSelectAction = "Выберите действие\n";
const char* bstMenuCreate = "\n[1] Создать бинарное дерево поиска";
const char* bstMenuIsEmpty = "\n[2] Проверить бинарное дерево поиска на пустоту";
const char* bstMenuAddItem = "\n[3] Добавить элемент в бинарное дерево поиска";
const char* bstMenuFind = "\n[4] Проверить , существует ли элемент в бинарном дереве поиска";
const char* bstMenuRemove = "\n[5] Удалить элемент из бинарного дерева поиска";
const char* bstMenuReadFromFile = "\n[6] Прочитать бинарное дерево поиска из файла";
const char* bstMenuWriteToFile = "\n[7] Записать бинарное дерево поиска в файл";
const char* bstMenuRandomize = "\n[8] Заполнить бинарное дерево поиска случайными числами ";
const char* bstMenuPrint = "\n[9] Вывести содержимое бинарного дерева поиска";
const char* bstMenuClear = "\n[10] Очистить бинарное дерево поиска";
const char* bstMenuDestroy = "\n[11] Удалить бинарное дерево поиска";
const char* bstMenuExit = "\n[12] Выйти";

const char* bstreeIsEmptyMessage = "[ Система ] Бинарное дерево поиска пустое \n\n";
const char* bstreeIsNotEmptyMessage = "[ Система ] Бинарное дерево поиска не пустое\n\n";
const char* bstreeCreateSuccessMessage = "[ Система ] Бинарное дерево поиска успешно создано\n\n";
const char* bstreeCreateFailureMessage = "[ Система ] Бинарное дерево поиска уже создано\n\n";
const char* bstreeNotCreatedMessage = "[ Система ] Бинарное дерево поиска не создано\n\n";
const char* bstreeAddItemMessage01 = "[ Система ] Введите элемент , который нужно добавить в Бинарное дерево поиска\n\n";
const char* bstreeAddItemMessage02 = "[ Cистема ] Элемент ";
const char* bstreeAddItemMessage03 = " успешно добавлен в Бинарное дерево поиска\n\n";
const char* bstreeFindItemMessage01 = "[ Система ] Введите элемент , который нужно найти в Бинарном дереве поиска\n\n";
const char* bstreeFindItemMessage02 = "[ Cистема ] Элемент ";
const char* bstreeFindItemMessage03 = " существует в Бинарном дереве поиска\n\n";
const char* bstreeFindItemMessage04 = " не существует в Бинарном дереве поиска\n\n";
const char* bstreeRemoveItemMessage01 = "[ Система ] Введите элемент , который нужно удалить из Бинарного дерева поиска\n\n";
const char* bstreeRemoveItemMessage02 = "[ Cистема ] Элемент ";
const char* bstreeRemoveItemMessage03 = " удален из Бинарного дерева поиска\n\n";
const char* bstreeRemoveItemMessage04 = " не существует в Бинарном дереве поиска\n\n";
const char* bstreeReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать Бинарное дерево поиска\n\n";
const char* bstreeReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* bstreeReadFileSuccessMessage = "[ Система ] Успешное чтение Бинарного дерева поиска из файла\n\n";
const char* bstreeWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать Бинарное дерево поиска\n\n";
const char* bstreeWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* bstreeWriteFileSuccess = "[ Система ] Успешная запись Бинарного дерева поиска в файл\n\n";
const char* bstreeDestroyedMessage = "[ Система ] Объект Бинарного дерева поиска успешно уничтожен\n\n";
const char* bstreeRandomizeMessage = "[ Система ] Введите число элементов Бинарного дерева поиска\n\n";
const char* bstreeRandomizeErrorMessage = "[ Система ] Неверная размерность Бинарного дерева поиска\n\n";
const char* bstreeRandomizeUpRangeMessge = "[ Система ] Верхний предел для случайных чисел\n\n";
const char* bstreeRandomizeSuccess = "[ Система ] Бинарное дерево поиска успешно создано и заполнена случайными числами\n\n";
const char* bstreeClearSuccessMessage = "[ Система ] Бинарное дерево поиска успешно очищено\n\n";
const char* bstreePrintMessage01 = "[ Система ] Каким образом вывести дерево?\n\n";
const char* bstreePrintMessage02 = "[ Система ] Прямой обход\n\n";
const char* bstreePrintMessage03 = "[ Система ] Симметричный обход\n\n";
const char* bstreePrintMessage04 = "[ Система ] Обратный обход\n\n";
const char* bstreeClearMessage = "[ Система ] Бинарное дерево поиска очищено";
const char* bstreeDestroyMessage = "[ Система ] Объект Бинарного дерева поиска уничтожено";


const char* rbTreeMenuSelectAction = "Выберите действие\n";
const char* rbTreeMenuCreate = "[1] Создать красно-черное дерево поиска\n";
const char* rbTreeMenuIsEmpty = "[2] Проверить красно-черное дерево поиска на пустоту\n";
const char* rbTreeMenuAddItem = "[3] Добавить элемент в красно-черное дерево поиска\n";
const char* rbTreeMenuFind = "[4] Минимальный элемент в дереве\n";
const char* rbTreeMenuRemove = "[5] Удалить элемент из красно-черного дерева поиска\n";
const char* rbTreeMenuReadFromFile = "[6] Прочитать красно-черное дерево поиска из файла\n";
const char* rbTreeMenuWriteToFile = "[7] Записать красно-черное дерево поиска в файл\n";
const char* rbTreeMenuRandomize = "[8] Заполнить красно-черное дерево поиска случайными числами \n";
const char* rbTreeMenuPrint = "[9] Вывести содержимое красно-черного дерева поиска\n";
const char* rbTreeMenuClear = "[10] Очистить красно-черное дерево поиска\n";
const char* rbTreeMenuDestroy = "[11] Удалить красно-черное дерево поиска\n";
const char* rbTreeMenuExit = "[12] Выйти\n";

const char* rbtreeIsEmptyMessage = "[ Система ] Красно-черное дерево пустое \n\n";
const char* rbtreeIsNotEmptyMessage = "[ Система ] Красно-черное дерево не пустое\n\n";
const char* rbtreeCreateSuccessMessage = "[ Система ] Красно-черное дерево успешно создано\n\n";
const char* rbtreeCreateFailureMessage = "[ Система ] Красно-черное дерево уже создано\n\n";
const char* rbtreeNotCreatedMessage = "[ Система ] Красно-черное дерево не создано\n\n";
const char* rbtreeAddItemMessage01 = "[ Система ] Введите элемент , который нужно добавить в Красно-черное дерево\n\n";
const char* rbtreeAddItemMessage02 = "[ Cистема ] Элемент ";
const char* rbtreeAddItemMessage03 = " успешно добавлен в Красно-черное дерево\n\n";
const char* rbtreeFindItemMessage02 = "[ Cистема ] Элемент ";
const char* rbtreeFindItemMessage03 = " минимален в Красно-черном дереве поиска\n\n";
const char* rbtreeFindItemMessage04 = " не существует в Красно-черном дереве поиска\n\n";
const char* rbtreeRemoveItemMessage01 = "[ Система ] Введите элемент , который нужно удалить из Красно-черного дерева поиска\n\n";
const char* rbtreeRemoveItemMessage02 = "[ Cистема ] Элемент ";
const char* rbtreeRemoveItemMessage03 = " удален из Красно-черного дерева поиска\n\n";
const char* rbtreeRemoveItemMessage04 = " не существует в Красно-черном дереве поиска\n\n";
const char* rbtreeReadFileMessage = "[ Система ] Введите название файла , из которого нужно прочитать Красно-черное дерево\n\n";
const char* rbtreeReadFileErrMessage = "[ Cистема ] Файл с таким названием не существует\n\n";
const char* rbtreeReadFileSuccessMessage = "[ Система ] Успешное чтение Красно-черного дерева поиска из файла\n\n";
const char* rbtreeWriteFileMessage = "[ Система ] Введите название файла , в который нужно записать Красно-черное дерево\n\n";
const char* rbtreeWriteFileErrMessage = "[ Cистема ] Ошибка при открытии потока\n\n";
const char* rbtreeWriteFileSuccess = "[ Система ] Успешная запись Красно-черного дерева поиска в файл\n\n";
const char* rbtreeDestroyedMessage = "[ Система ] Объект Красно-черного дерева поиска успешно уничтожен\n\n";
const char* rbtreeRandomizeMessage = "[ Система ] Введите число элементов Красно-черного дерева поиска\n\n";
const char* rbtreeRandomizeErrorMessage = "[ Система ] Неверная размерность Красно-черного дерева поиска\n\n";
const char* rbtreeRandomizeUpRangeMessge = "[ Система ] Верхний предел для случайных чисел\n\n";
const char* rbtreeRandomizeSuccess = "[ Система ] Красно-черное дерево успешно создано и заполнена случайными числами\n\n";
const char* rbtreeClearSuccessMessage = "[ Система ] Красно-черное дерево успешно очищено\n\n";
const char* rbtreePrintMessage01 = "[ Система ] Каким образом вывести дерево?\n\n";
const char* rbtreePrintMessage02 = "[ Система ] Прямой обход\n\n";
const char* rbtreePrintMessage03 = "[ Система ] Симметричный обход\n\n";
const char* rbtreePrintMessage04 = "[ Система ] Обратный обход\n\n";
const char* rbtreeClearMessage = "[ Система ] Красно-черное дерево очищено\n\n";
const char* rbtreeDestroyMessage = "[ Система ] Объект Красно-черного дерева поиска уничтожен\n\n";